name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "deploy" to confirm deployment'
        required: true
        default: ''
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  validate-deployment:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Check confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "deploy" ]; then
            echo "❌ Deployment not confirmed. Please type 'deploy' to confirm."
            exit 1
          fi
          echo "✅ Deployment confirmed"

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: [validate-deployment]
    if: always() && (needs.validate-deployment.result == 'success' || needs.validate-deployment.result == 'skipped')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: llmready_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run backend tests
        working-directory: ./backend
        run: |
          cat > .env << EOF
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/llmready_test
          REDIS_URL=redis://localhost:6379/0
          SECRET_KEY=test_secret_key
          STRIPE_SECRET_KEY=sk_test_dummy
          STRIPE_WEBHOOK_SECRET=whsec_dummy
          SENDGRID_API_KEY=SG.dummy
          FRONTEND_URL=http://localhost:5173
          ENVIRONMENT=test
          EOF
          alembic upgrade head
          python run_tests.py
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          cat > .env.production << EOF
          VITE_API_URL=${{ secrets.PRODUCTION_API_URL }}
          VITE_STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }}
          EOF
          npm run build
      
      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 1

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [build-and-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
      
      - name: Create deployment package
        run: |
          tar -czf backend.tar.gz \
            backend/ \
            docker-compose.yml \
            --exclude=backend/__pycache__ \
            --exclude=backend/.pytest_cache \
            --exclude=backend/tests
      
      - name: Upload to server
        run: |
          scp backend.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
      
      - name: Deploy on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            
            # Create deployment directory
            mkdir -p /opt/llmready
            cd /opt/llmready
            
            # Backup current deployment
            if [ -d "backend" ]; then
              echo "Creating backup..."
              timestamp=$(date +%Y%m%d_%H%M%S)
              mkdir -p backups
              tar -czf backups/backup_$timestamp.tar.gz backend/ docker-compose.yml || true
            fi
            
            # Extract new version
            echo "Extracting new version..."
            tar -xzf /tmp/backend.tar.gz
            rm /tmp/backend.tar.gz
            
            # Create production .env if not exists
            if [ ! -f backend/.env ]; then
              echo "Creating .env from template..."
              cp backend/.env.production.example backend/.env
              echo "⚠️  Please update backend/.env with production values!"
            fi
            
            # Pull latest Docker images
            echo "Pulling Docker images..."
            docker-compose pull
            
            # Run database migrations
            echo "Running migrations..."
            docker-compose run --rm -e DATABASE_URL="${DATABASE_URL}" backend alembic upgrade head
            
            # Restart services with zero downtime
            echo "Restarting services..."
            docker-compose up -d --build --force-recreate
            
            # Wait for health check
            echo "Waiting for services to be healthy..."
            sleep 10
            
            # Check if services are running
            docker-compose ps
            
            echo "✅ Backend deployment complete!"
          EOF
      
      - name: Verify deployment
        run: |
          sleep 5
          curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/health || exit 1

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-backend]
    
    steps:
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: dist
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
      
      - name: Create deployment package
        run: |
          tar -czf frontend.tar.gz dist/
      
      - name: Upload to server
        run: |
          scp frontend.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
      
      - name: Deploy on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            
            # Deploy directory
            DEPLOY_DIR="/var/www/llmready"
            
            # Create deployment directory
            sudo mkdir -p $DEPLOY_DIR
            
            # Backup current deployment
            if [ -d "$DEPLOY_DIR/dist" ]; then
              echo "Creating backup..."
              timestamp=$(date +%Y%m%d_%H%M%S)
              sudo mkdir -p $DEPLOY_DIR/backups
              sudo mv $DEPLOY_DIR/dist $DEPLOY_DIR/backups/dist_$timestamp
            fi
            
            # Extract new version
            echo "Extracting new version..."
            cd $DEPLOY_DIR
            sudo tar -xzf /tmp/frontend.tar.gz
            rm /tmp/frontend.tar.gz
            
            # Set proper permissions
            sudo chown -R www-data:www-data $DEPLOY_DIR/dist
            sudo chmod -R 755 $DEPLOY_DIR/dist
            
            # Reload nginx if exists
            if command -v nginx &> /dev/null; then
              echo "Reloading nginx..."
              sudo nginx -t && sudo systemctl reload nginx
            fi
            
            echo "✅ Frontend deployment complete!"
          EOF
      
      - name: Verify frontend deployment
        run: |
          sleep 5
          curl -f https://${{ secrets.PRODUCTION_DOMAIN }} || exit 1

  notify-deployment:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    
    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.deploy-backend.result }}" == "success" ]] && \
             [[ "${{ needs.deploy-frontend.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=🚀" >> $GITHUB_OUTPUT
            echo "message=Deployment successful!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Deployment failed!" >> $GITHUB_OUTPUT
          fi
      
      - name: Send success email
        if: steps.status.outputs.status == 'success'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "🚀 Production Deployment Successful"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: GitHub Actions <noreply@github.com>
          body: |
            ✅ Production deployment completed successfully!
            
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Branch: ${{ github.ref_name }}
            
            Backend: Deployed
            Frontend: Deployed
            
            View deployment: https://${{ secrets.PRODUCTION_DOMAIN }}
            View workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      
      - name: Send failure email
        if: steps.status.outputs.status == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "❌ Production Deployment Failed"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: GitHub Actions <noreply@github.com>
          body: |
            ❌ Production deployment failed!
            
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Branch: ${{ github.ref_name }}
            
            Backend: ${{ needs.deploy-backend.result }}
            Frontend: ${{ needs.deploy-frontend.result }}
            
            Please check the workflow logs:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}